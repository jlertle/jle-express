#!/usr/bin/env node
'use strict';


// load .env file as soon as possible
var path = require('path');
var fs = require('fs');
var dotenv = require('dotenv');

var envFile = path.join(__dirname, '..', '.env');

//console.log(envFile);

if (fs.existsSync(envFile)) {
  dotenv.load();
  //console.log(process.env);
} else {
  console.error('No .env file found');
}


/**
 * Module dependencies.
 */

var app = require('../server/app');
var debug = require('debug')('jle-express:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
                             'Pipe ' + port :
                             'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
                             'pipe ' + addr :
                             'port ' + addr.port;
  debug('Listening on ' + bind);
}

// /**
//  * Exit handler. Close down connections before exit.
//  */
// function exit(error) {
//     var errorCode = 0;
//     if (error) {
//         console.error(error);
//         errorCode = 1;
//     }
//     console.log('\n\nClosing down connections...');
//     runExitProcess().then(
//         function() {
//             process.exit(errorCode);
//         },
//         function() {
//             process.exit(1);
//         },
//         function() {}
//     );
// }
//
// // Listen for all "exit" events so we could put everything back
// process.on('exit', exit);
// process.on('SIGINT', exit);
// process.on('uncaughtException', exit);
